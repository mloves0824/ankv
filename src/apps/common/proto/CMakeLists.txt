CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(ANKV_PROTO)
SET(PROJECT_OUTNAME proto)
ADD_DEFINITIONS(-DPROTO_LIBRARY)


IF (WIN32)
ELSE(WIN32)
	IF (CMAKE_BUILD_TYPE MATCHES DEBUG)
		ADD_DEFINITIONS(-DDEBUG)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -g -fshort-wchar")
		SET(PROJECT_LIB_DIR ${PROJECT_SOURCE_DIR}/../../../../ops/output/debug/debug_linux_x64/dep)
		SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../../../../ops/output/debug/debug_linux_x64/dep)
		SET(PROJECT_LIBS_PLATFORM
			protobuf
			pthread
			dl
		)
		MESSAGE(STATUS "${PROJECT_OUTNAME} is VERSION: debug_linux_x64")

	ELSEIF (CMAKE_BUILD_TYPE MATCHES RELEASE)
		ADD_DEFINITIONS(-DRELEASE)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O2 -fshort-wchar -fopenmp")
		SET(PROJECT_LIB_DIR
			${PROJECT_SOURCE_DIR}/../../lib/release_linux_x64
			${PROJECT_SOURCE_DIR}/../../bin/linux_x64/im_common
		)
		SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../../bin/linux_x64/)
		SET(PROJECT_LIBS_PLATFORM
			protobuf
			brpc	
			pthread
			dl
		)
		MESSAGE(STATUS "${PROJECT_OUTNAME} is VERSION: release_linux_x64")

	ENDIF (CMAKE_BUILD_TYPE MATCHES DEBUG)

	aux_source_directory(./ PROJECT_SRCS)

	INCLUDE_DIRECTORIES(
		${PROJECT_SOURCE_DIR}/
		${PROJECT_SOURCE_DIR}/../common/proto
	)

	LINK_DIRECTORIES(${PROJECT_LIB_DIR})

	ADD_LIBRARY(${PROJECT_OUTNAME} ${PROJECT_SRCS})
	TARGET_LINK_LIBRARIES(${PROJECT_OUTNAME} ${PROJECT_LIBS_PLATFORM})
	#ADD_DEPENDENCIES(${PROJECT_OUTNAME}    )
ENDIF (WIN32)

MESSAGE(STATUS "${PROJECT_OUTNAME} is BINARY dir:" ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "${PROJECT_OUTNAME} is SOURCE dir:" ${PROJECT_SOURCE_DIR})
